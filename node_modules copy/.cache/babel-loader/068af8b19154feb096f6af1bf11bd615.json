{"ast":null,"code":"'use strict';\n\nconst KillCursor = require('../connection/commands').KillCursor;\n\nconst GetMore = require('../connection/commands').GetMore;\n\nconst calculateDurationInMs = require('../../utils').calculateDurationInMs;\n\nconst extractCommand = require('../../command_utils').extractCommand; // helper methods\n\n\nconst namespace = command => command.ns;\n\nconst databaseName = command => command.ns.split('.')[0];\n\nconst generateConnectionId = pool => pool.options ? `${pool.options.host}:${pool.options.port}` : pool.address;\n\nconst isLegacyPool = pool => pool.s && pool.queue;\n\nconst extractReply = (command, reply) => {\n  if (command instanceof GetMore) {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        nextBatch: reply.message.documents\n      }\n    };\n  }\n\n  if (command instanceof KillCursor) {\n    return {\n      ok: 1,\n      cursorsUnknown: command.cursorIds\n    };\n  } // is this a legacy find command?\n\n\n  if (command.query && typeof command.query.$query !== 'undefined') {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        firstBatch: reply.message.documents\n      }\n    };\n  }\n\n  return reply && reply.result ? reply.result : reply;\n};\n\nconst extractConnectionDetails = pool => {\n  if (isLegacyPool(pool)) {\n    return {\n      connectionId: generateConnectionId(pool)\n    };\n  } // APM in the modern pool is done at the `Connection` level, so we rename it here for\n  // readability.\n\n\n  const connection = pool;\n  return {\n    address: connection.address,\n    connectionId: connection.id\n  };\n};\n/** An event indicating the start of a given command */\n\n\nclass CommandStartedEvent {\n  /**\n   * Create a started event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   */\n  constructor(pool, command) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      databaseName: databaseName(command),\n      commandName,\n      command: extractedCommand.shouldRedact ? {} : extractedCommand.cmd\n    });\n  }\n\n}\n/** An event indicating the success of a given command */\n\n\nclass CommandSucceededEvent {\n  /**\n   * Create a succeeded event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {Object} reply the reply for this command from the server\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, reply, started) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      commandName,\n      duration: calculateDurationInMs(started),\n      reply: extractedCommand.shouldRedact ? {} : extractReply(command, reply)\n    });\n  }\n\n}\n/** An event indicating the failure of a given command */\n\n\nclass CommandFailedEvent {\n  /**\n   * Create a failure event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {MongoError|Object} error the generated error or a server error response\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, error, started) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      commandName,\n      duration: calculateDurationInMs(started),\n      failure: extractedCommand.shouldRedact ? {} : error\n    });\n  }\n\n}\n\nmodule.exports = {\n  CommandStartedEvent,\n  CommandSucceededEvent,\n  CommandFailedEvent\n};","map":{"version":3,"sources":["C:/Users/david/Documents/United Plastics/Maintenance/machines/node_modules/mongodb/lib/core/connection/apm.js"],"names":["KillCursor","require","GetMore","calculateDurationInMs","extractCommand","namespace","command","ns","databaseName","split","generateConnectionId","pool","options","host","port","address","isLegacyPool","s","queue","extractReply","reply","ok","cursor","id","message","cursorId","nextBatch","documents","cursorsUnknown","cursorIds","query","$query","firstBatch","result","extractConnectionDetails","connectionId","connection","CommandStartedEvent","constructor","extractedCommand","commandName","name","connectionDetails","Object","assign","requestId","shouldRedact","cmd","CommandSucceededEvent","started","duration","CommandFailedEvent","error","failure","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst KillCursor = require('../connection/commands').KillCursor;\nconst GetMore = require('../connection/commands').GetMore;\nconst calculateDurationInMs = require('../../utils').calculateDurationInMs;\nconst extractCommand = require('../../command_utils').extractCommand;\n\n// helper methods\nconst namespace = command => command.ns;\nconst databaseName = command => command.ns.split('.')[0];\nconst generateConnectionId = pool =>\n  pool.options ? `${pool.options.host}:${pool.options.port}` : pool.address;\nconst isLegacyPool = pool => pool.s && pool.queue;\n\nconst extractReply = (command, reply) => {\n  if (command instanceof GetMore) {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        nextBatch: reply.message.documents\n      }\n    };\n  }\n\n  if (command instanceof KillCursor) {\n    return {\n      ok: 1,\n      cursorsUnknown: command.cursorIds\n    };\n  }\n\n  // is this a legacy find command?\n  if (command.query && typeof command.query.$query !== 'undefined') {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        firstBatch: reply.message.documents\n      }\n    };\n  }\n\n  return reply && reply.result ? reply.result : reply;\n};\n\nconst extractConnectionDetails = pool => {\n  if (isLegacyPool(pool)) {\n    return {\n      connectionId: generateConnectionId(pool)\n    };\n  }\n\n  // APM in the modern pool is done at the `Connection` level, so we rename it here for\n  // readability.\n  const connection = pool;\n  return {\n    address: connection.address,\n    connectionId: connection.id\n  };\n};\n\n/** An event indicating the start of a given command */\nclass CommandStartedEvent {\n  /**\n   * Create a started event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   */\n  constructor(pool, command) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      databaseName: databaseName(command),\n      commandName,\n      command: extractedCommand.shouldRedact ? {} : extractedCommand.cmd\n    });\n  }\n}\n\n/** An event indicating the success of a given command */\nclass CommandSucceededEvent {\n  /**\n   * Create a succeeded event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {Object} reply the reply for this command from the server\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, reply, started) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      commandName,\n      duration: calculateDurationInMs(started),\n      reply: extractedCommand.shouldRedact ? {} : extractReply(command, reply)\n    });\n  }\n}\n\n/** An event indicating the failure of a given command */\nclass CommandFailedEvent {\n  /**\n   * Create a failure event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {MongoError|Object} error the generated error or a server error response\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, error, started) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      commandName,\n      duration: calculateDurationInMs(started),\n      failure: extractedCommand.shouldRedact ? {} : error\n    });\n  }\n}\n\nmodule.exports = {\n  CommandStartedEvent,\n  CommandSucceededEvent,\n  CommandFailedEvent\n};\n"]},"metadata":{},"sourceType":"script"}