{"ast":null,"code":"'use strict';\n\nconst Logger = require('./connection/logger');\n\nconst retrieveBSON = require('./connection/utils').retrieveBSON;\n\nconst MongoError = require('./error').MongoError;\n\nconst MongoNetworkError = require('./error').MongoNetworkError;\n\nconst collationNotSupported = require('./utils').collationNotSupported;\n\nconst ReadPreference = require('./topologies/read_preference');\n\nconst isUnifiedTopology = require('./utils').isUnifiedTopology;\n\nconst executeOperation = require('../operations/execute_operation');\n\nconst Readable = require('stream').Readable;\n\nconst SUPPORTS = require('../utils').SUPPORTS;\n\nconst MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nconst mergeOptions = require('../utils').mergeOptions;\n\nconst OperationBase = require('../operations/operation').OperationBase;\n\nconst BSON = retrieveBSON();\nconst Long = BSON.Long; // Possible states for a cursor\n\nconst CursorState = {\n  INIT: 0,\n  OPEN: 1,\n  CLOSED: 2,\n  GET_MORE: 3\n}; //\n// Handle callback (including any exceptions thrown)\n\nfunction handleCallback(callback, err, result) {\n  try {\n    callback(err, result);\n  } catch (err) {\n    process.nextTick(function () {\n      throw err;\n    });\n  }\n}\n/**\n * This is a cursor results callback\n *\n * @callback resultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {object} document\n */\n\n/**\n * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query.\n *\n * **CURSORS Cannot directly be instantiated**\n */\n\n/**\n * The core cursor class. All cursors in the driver build off of this one.\n *\n * @property {number} cursorBatchSize The current cursorBatchSize for the cursor\n * @property {number} cursorLimit The current cursorLimit for the cursor\n * @property {number} cursorSkip The current cursorSkip for the cursor\n */\n\n\nclass CoreCursor extends Readable {\n  /**\n   * Create a new core `Cursor` instance.\n   * **NOTE** Not to be instantiated directly\n   *\n   * @param {object} topology The server topology instance.\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {{object}|Long} cmd The selector (can be a command or a cursorId)\n   * @param {object} [options=null] Optional settings.\n   * @param {object} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/| find command documentation} and {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {object} [options.transforms=null] Transform methods for the cursor results\n   * @param {function} [options.transforms.query] Transform the value returned from the initial query\n   * @param {function} [options.transforms.doc] Transform each document returned from Cursor.prototype._next\n   */\n  constructor(topology, ns, cmd, options) {\n    super({\n      objectMode: true\n    });\n    options = options || {};\n\n    if (ns instanceof OperationBase) {\n      this.operation = ns;\n      ns = this.operation.ns.toString();\n      options = this.operation.options;\n      cmd = this.operation.cmd ? this.operation.cmd : {};\n    } // Cursor pool\n\n\n    this.pool = null; // Cursor server\n\n    this.server = null; // Do we have a not connected handler\n\n    this.disconnectHandler = options.disconnectHandler; // Set local values\n\n    this.bson = topology.s.bson;\n    this.ns = ns;\n    this.namespace = MongoDBNamespace.fromString(ns);\n    this.cmd = cmd;\n    this.options = options;\n    this.topology = topology; // All internal state\n\n    this.cursorState = {\n      cursorId: null,\n      cmd,\n      documents: options.documents || [],\n      cursorIndex: 0,\n      dead: false,\n      killed: false,\n      init: false,\n      notified: false,\n      limit: options.limit || cmd.limit || 0,\n      skip: options.skip || cmd.skip || 0,\n      batchSize: options.batchSize || cmd.batchSize || 1000,\n      currentLimit: 0,\n      // Result field name if not a cursor (contains the array of results)\n      transforms: options.transforms,\n      raw: options.raw || cmd && cmd.raw\n    };\n\n    if (typeof options.session === 'object') {\n      this.cursorState.session = options.session;\n    } // Add promoteLong to cursor state\n\n\n    const topologyOptions = topology.s.options;\n\n    if (typeof topologyOptions.promoteLongs === 'boolean') {\n      this.cursorState.promoteLongs = topologyOptions.promoteLongs;\n    } else if (typeof options.promoteLongs === 'boolean') {\n      this.cursorState.promoteLongs = options.promoteLongs;\n    } // Add promoteValues to cursor state\n\n\n    if (typeof topologyOptions.promoteValues === 'boolean') {\n      this.cursorState.promoteValues = topologyOptions.promoteValues;\n    } else if (typeof options.promoteValues === 'boolean') {\n      this.cursorState.promoteValues = options.promoteValues;\n    } // Add promoteBuffers to cursor state\n\n\n    if (typeof topologyOptions.promoteBuffers === 'boolean') {\n      this.cursorState.promoteBuffers = topologyOptions.promoteBuffers;\n    } else if (typeof options.promoteBuffers === 'boolean') {\n      this.cursorState.promoteBuffers = options.promoteBuffers;\n    } // Add bsonRegExp to cursor state\n\n\n    if (typeof topologyOptions.bsonRegExp === 'boolean') {\n      this.cursorState.bsonRegExp = topologyOptions.bsonRegExp;\n    } else if (typeof options.bsonRegExp === 'boolean') {\n      this.cursorState.bsonRegExp = options.bsonRegExp;\n    }\n\n    if (topologyOptions.reconnect) {\n      this.cursorState.reconnect = topologyOptions.reconnect;\n    } // Logger\n\n\n    this.logger = Logger('Cursor', topologyOptions); //\n    // Did we pass in a cursor id\n\n    if (typeof cmd === 'number') {\n      this.cursorState.cursorId = Long.fromNumber(cmd);\n      this.cursorState.lastCursorId = this.cursorState.cursorId;\n    } else if (cmd instanceof Long) {\n      this.cursorState.cursorId = cmd;\n      this.cursorState.lastCursorId = cmd;\n    } // TODO: remove as part of NODE-2104\n\n\n    if (this.operation) {\n      this.operation.cursorState = this.cursorState;\n    }\n  }\n\n  setCursorBatchSize(value) {\n    this.cursorState.batchSize = value;\n  }\n\n  cursorBatchSize() {\n    return this.cursorState.batchSize;\n  }\n\n  setCursorLimit(value) {\n    this.cursorState.limit = value;\n  }\n\n  cursorLimit() {\n    return this.cursorState.limit;\n  }\n\n  setCursorSkip(value) {\n    this.cursorState.skip = value;\n  }\n\n  cursorSkip() {\n    return this.cursorState.skip;\n  }\n  /**\n   * Retrieve the next document from the cursor\n   * @method\n   * @param {resultCallback} callback A callback function\n   */\n\n\n  _next(callback) {\n    nextFunction(this, callback);\n  }\n  /**\n   * Clone the cursor\n   * @method\n   * @return {Cursor}\n   */\n\n\n  clone() {\n    const clonedOptions = mergeOptions({}, this.options);\n    delete clonedOptions.session;\n    return this.topology.cursor(this.ns, this.cmd, clonedOptions);\n  }\n  /**\n   * Checks if the cursor is dead\n   * @method\n   * @return {boolean} A boolean signifying if the cursor is dead or not\n   */\n\n\n  isDead() {\n    return this.cursorState.dead === true;\n  }\n  /**\n   * Checks if the cursor was killed by the application\n   * @method\n   * @return {boolean} A boolean signifying if the cursor was killed by the application\n   */\n\n\n  isKilled() {\n    return this.cursorState.killed === true;\n  }\n  /**\n   * Checks if the cursor notified it's caller about it's death\n   * @method\n   * @return {boolean} A boolean signifying if the cursor notified the callback\n   */\n\n\n  isNotified() {\n    return this.cursorState.notified === true;\n  }\n  /**\n   * Returns current buffered documents length\n   * @method\n   * @return {number} The number of items in the buffered documents\n   */\n\n\n  bufferedCount() {\n    return this.cursorState.documents.length - this.cursorState.cursorIndex;\n  }\n  /**\n   * Returns current buffered documents\n   * @method\n   * @return {Array} An array of buffered documents\n   */\n\n\n  readBufferedDocuments(number) {\n    const unreadDocumentsLength = this.cursorState.documents.length - this.cursorState.cursorIndex;\n    const length = number < unreadDocumentsLength ? number : unreadDocumentsLength;\n    let elements = this.cursorState.documents.slice(this.cursorState.cursorIndex, this.cursorState.cursorIndex + length); // Transform the doc with passed in transformation method if provided\n\n    if (this.cursorState.transforms && typeof this.cursorState.transforms.doc === 'function') {\n      // Transform all the elements\n      for (let i = 0; i < elements.length; i++) {\n        elements[i] = this.cursorState.transforms.doc(elements[i]);\n      }\n    } // Ensure we do not return any more documents than the limit imposed\n    // Just return the number of elements up to the limit\n\n\n    if (this.cursorState.limit > 0 && this.cursorState.currentLimit + elements.length > this.cursorState.limit) {\n      elements = elements.slice(0, this.cursorState.limit - this.cursorState.currentLimit);\n      this.kill();\n    } // Adjust current limit\n\n\n    this.cursorState.currentLimit = this.cursorState.currentLimit + elements.length;\n    this.cursorState.cursorIndex = this.cursorState.cursorIndex + elements.length; // Return elements\n\n    return elements;\n  }\n  /**\n   * Resets local state for this cursor instance, and issues a `killCursors` command to the server\n   *\n   * @param {resultCallback} callback A callback function\n   */\n\n\n  kill(callback) {\n    // Set cursor to dead\n    this.cursorState.dead = true;\n    this.cursorState.killed = true; // Remove documents\n\n    this.cursorState.documents = []; // If no cursor id just return\n\n    if (this.cursorState.cursorId == null || this.cursorState.cursorId.isZero() || this.cursorState.init === false) {\n      if (callback) callback(null, null);\n      return;\n    }\n\n    this.server.killCursors(this.ns, this.cursorState, callback);\n  }\n  /**\n   * Resets the cursor\n   */\n\n\n  rewind() {\n    if (this.cursorState.init) {\n      if (!this.cursorState.dead) {\n        this.kill();\n      }\n\n      this.cursorState.currentLimit = 0;\n      this.cursorState.init = false;\n      this.cursorState.dead = false;\n      this.cursorState.killed = false;\n      this.cursorState.notified = false;\n      this.cursorState.documents = [];\n      this.cursorState.cursorId = null;\n      this.cursorState.cursorIndex = 0;\n    }\n  } // Internal methods\n\n\n  _read() {\n    if (this.s && this.s.state === CursorState.CLOSED || this.isDead()) {\n      return this.push(null);\n    } // Get the next item\n\n\n    this._next((err, result) => {\n      if (err) {\n        if (this.listeners('error') && this.listeners('error').length > 0) {\n          this.emit('error', err);\n        }\n\n        if (!this.isDead()) this.close(); // Emit end event\n\n        this.emit('end');\n        return this.emit('finish');\n      } // If we provided a transformation method\n\n\n      if (this.cursorState.streamOptions && typeof this.cursorState.streamOptions.transform === 'function' && result != null) {\n        return this.push(this.cursorState.streamOptions.transform(result));\n      } // Return the result\n\n\n      this.push(result);\n\n      if (result === null && this.isDead()) {\n        this.once('end', () => {\n          this.close();\n          this.emit('finish');\n        });\n      }\n    });\n  }\n\n  _endSession(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    const session = this.cursorState.session;\n\n    if (session && (options.force || session.owner === this)) {\n      this.cursorState.session = undefined;\n\n      if (this.operation) {\n        this.operation.clearSession();\n      }\n\n      session.endSession(callback);\n      return true;\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    return false;\n  }\n\n  _getMore(callback) {\n    if (this.logger.isDebug()) {\n      this.logger.debug(`schedule getMore call for query [${JSON.stringify(this.query)}]`);\n    } // Set the current batchSize\n\n\n    let batchSize = this.cursorState.batchSize;\n\n    if (this.cursorState.limit > 0 && this.cursorState.currentLimit + batchSize > this.cursorState.limit) {\n      batchSize = this.cursorState.limit - this.cursorState.currentLimit;\n    }\n\n    const cursorState = this.cursorState;\n    this.server.getMore(this.ns, cursorState, batchSize, this.options, (err, result, conn) => {\n      // NOTE: `getMore` modifies `cursorState`, would be very ideal not to do so in the future\n      if (err || cursorState.cursorId && cursorState.cursorId.isZero()) {\n        this._endSession();\n      }\n\n      callback(err, result, conn);\n    });\n  }\n\n  _initializeCursor(callback) {\n    const cursor = this; // NOTE: this goes away once cursors use `executeOperation`\n\n    if (isUnifiedTopology(cursor.topology) && cursor.topology.shouldCheckForSessionSupport()) {\n      cursor.topology.selectServer(ReadPreference.primaryPreferred, err => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        this._initializeCursor(callback);\n      });\n      return;\n    }\n\n    function done(err, result) {\n      const cursorState = cursor.cursorState;\n\n      if (err || cursorState.cursorId && cursorState.cursorId.isZero()) {\n        cursor._endSession();\n      }\n\n      if (cursorState.documents.length === 0 && cursorState.cursorId && cursorState.cursorId.isZero() && !cursor.cmd.tailable && !cursor.cmd.awaitData) {\n        return setCursorNotified(cursor, callback);\n      }\n\n      callback(err, result);\n    }\n\n    const queryCallback = (err, r) => {\n      if (err) {\n        return done(err);\n      }\n\n      const result = r.message;\n\n      if (Array.isArray(result.documents) && result.documents.length === 1) {\n        const document = result.documents[0];\n\n        if (result.queryFailure) {\n          return done(new MongoError(document), null);\n        } // Check if we have a command cursor\n\n\n        if (!cursor.cmd.find || cursor.cmd.find && cursor.cmd.virtual === false) {\n          // We have an error document, return the error\n          if (document.$err || document.errmsg) {\n            return done(new MongoError(document), null);\n          } // We have a cursor document\n\n\n          if (document.cursor != null && typeof document.cursor !== 'string') {\n            const id = document.cursor.id; // If we have a namespace change set the new namespace for getmores\n\n            if (document.cursor.ns) {\n              cursor.ns = document.cursor.ns;\n            } // Promote id to long if needed\n\n\n            cursor.cursorState.cursorId = typeof id === 'number' ? Long.fromNumber(id) : id;\n            cursor.cursorState.lastCursorId = cursor.cursorState.cursorId;\n            cursor.cursorState.operationTime = document.operationTime; // If we have a firstBatch set it\n\n            if (Array.isArray(document.cursor.firstBatch)) {\n              cursor.cursorState.documents = document.cursor.firstBatch; //.reverse();\n            } // Return after processing command cursor\n\n\n            return done(null, result);\n          }\n        }\n      } // Otherwise fall back to regular find path\n\n\n      const cursorId = result.cursorId || 0;\n      cursor.cursorState.cursorId = cursorId instanceof Long ? cursorId : Long.fromNumber(cursorId);\n      cursor.cursorState.documents = result.documents;\n      cursor.cursorState.lastCursorId = result.cursorId; // Transform the results with passed in transformation method if provided\n\n      if (cursor.cursorState.transforms && typeof cursor.cursorState.transforms.query === 'function') {\n        cursor.cursorState.documents = cursor.cursorState.transforms.query(result);\n      }\n\n      done(null, result);\n    };\n\n    if (cursor.operation) {\n      if (cursor.logger.isDebug()) {\n        cursor.logger.debug(`issue initial query [${JSON.stringify(cursor.cmd)}] with flags [${JSON.stringify(cursor.query)}]`);\n      }\n\n      executeOperation(cursor.topology, cursor.operation, (err, result) => {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        cursor.server = cursor.operation.server;\n        cursor.cursorState.init = true; // NOTE: this is a special internal method for cloning a cursor, consider removing\n\n        if (cursor.cursorState.cursorId != null) {\n          return done();\n        }\n\n        queryCallback(err, result);\n      });\n      return;\n    } // Very explicitly choose what is passed to selectServer\n\n\n    const serverSelectOptions = {};\n\n    if (cursor.cursorState.session) {\n      serverSelectOptions.session = cursor.cursorState.session;\n    }\n\n    if (cursor.operation) {\n      serverSelectOptions.readPreference = cursor.operation.readPreference;\n    } else if (cursor.options.readPreference) {\n      serverSelectOptions.readPreference = cursor.options.readPreference;\n    }\n\n    return cursor.topology.selectServer(serverSelectOptions, (err, server) => {\n      if (err) {\n        const disconnectHandler = cursor.disconnectHandler;\n\n        if (disconnectHandler != null) {\n          return disconnectHandler.addObjectAndMethod('cursor', cursor, 'next', [callback], callback);\n        }\n\n        return callback(err);\n      }\n\n      cursor.server = server;\n      cursor.cursorState.init = true;\n\n      if (collationNotSupported(cursor.server, cursor.cmd)) {\n        return callback(new MongoError(`server ${cursor.server.name} does not support collation`));\n      } // NOTE: this is a special internal method for cloning a cursor, consider removing\n\n\n      if (cursor.cursorState.cursorId != null) {\n        return done();\n      }\n\n      if (cursor.logger.isDebug()) {\n        cursor.logger.debug(`issue initial query [${JSON.stringify(cursor.cmd)}] with flags [${JSON.stringify(cursor.query)}]`);\n      }\n\n      if (cursor.cmd.find != null) {\n        server.query(cursor.ns, cursor.cmd, cursor.cursorState, cursor.options, queryCallback);\n        return;\n      }\n\n      const commandOptions = Object.assign({\n        session: cursor.cursorState.session\n      }, cursor.options);\n      server.command(cursor.ns, cursor.cmd, commandOptions, queryCallback);\n    });\n  }\n\n}\n\nif (SUPPORTS.ASYNC_ITERATOR) {\n  CoreCursor.prototype[Symbol.asyncIterator] = require('../async/async_iterator').asyncIterator;\n}\n/**\n * Validate if the pool is dead and return error\n */\n\n\nfunction isConnectionDead(self, callback) {\n  if (self.pool && self.pool.isDestroyed()) {\n    self.cursorState.killed = true;\n    const err = new MongoNetworkError(`connection to host ${self.pool.host}:${self.pool.port} was destroyed`);\n\n    _setCursorNotifiedImpl(self, () => callback(err));\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * Validate if the cursor is dead but was not explicitly killed by user\n */\n\n\nfunction isCursorDeadButNotkilled(self, callback) {\n  // Cursor is dead but not marked killed, return null\n  if (self.cursorState.dead && !self.cursorState.killed) {\n    self.cursorState.killed = true;\n    setCursorNotified(self, callback);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Validate if the cursor is dead and was killed by user\n */\n\n\nfunction isCursorDeadAndKilled(self, callback) {\n  if (self.cursorState.dead && self.cursorState.killed) {\n    handleCallback(callback, new MongoError('cursor is dead'));\n    return true;\n  }\n\n  return false;\n}\n/**\n * Validate if the cursor was killed by the user\n */\n\n\nfunction isCursorKilled(self, callback) {\n  if (self.cursorState.killed) {\n    setCursorNotified(self, callback);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Mark cursor as being dead and notified\n */\n\n\nfunction setCursorDeadAndNotified(self, callback) {\n  self.cursorState.dead = true;\n  setCursorNotified(self, callback);\n}\n/**\n * Mark cursor as being notified\n */\n\n\nfunction setCursorNotified(self, callback) {\n  _setCursorNotifiedImpl(self, () => handleCallback(callback, null, null));\n}\n\nfunction _setCursorNotifiedImpl(self, callback) {\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n\n  if (self.cursorState.session) {\n    self._endSession(callback);\n\n    return;\n  }\n\n  return callback();\n}\n\nfunction nextFunction(self, callback) {\n  // We have notified about it\n  if (self.cursorState.notified) {\n    return callback(new Error('cursor is exhausted'));\n  } // Cursor is killed return null\n\n\n  if (isCursorKilled(self, callback)) return; // Cursor is dead but not marked killed, return null\n\n  if (isCursorDeadButNotkilled(self, callback)) return; // We have a dead and killed cursor, attempting to call next should error\n\n  if (isCursorDeadAndKilled(self, callback)) return; // We have just started the cursor\n\n  if (!self.cursorState.init) {\n    // Topology is not connected, save the call in the provided store to be\n    // Executed at some point when the handler deems it's reconnected\n    if (!self.topology.isConnected(self.options)) {\n      // Only need this for single server, because repl sets and mongos\n      // will always continue trying to reconnect\n      if (self.topology._type === 'server' && !self.topology.s.options.reconnect) {\n        // Reconnect is disabled, so we'll never reconnect\n        return callback(new MongoError('no connection available'));\n      }\n\n      if (self.disconnectHandler != null) {\n        if (self.topology.isDestroyed()) {\n          // Topology was destroyed, so don't try to wait for it to reconnect\n          return callback(new MongoError('Topology was destroyed'));\n        }\n\n        self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);\n        return;\n      }\n    }\n\n    self._initializeCursor((err, result) => {\n      if (err || result === null) {\n        callback(err, result);\n        return;\n      }\n\n      nextFunction(self, callback);\n    });\n\n    return;\n  }\n\n  if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n    // Ensure we kill the cursor on the server\n    self.kill(() => // Set cursor in dead and notified state\n    setCursorDeadAndNotified(self, callback));\n  } else if (self.cursorState.cursorIndex === self.cursorState.documents.length && !Long.ZERO.equals(self.cursorState.cursorId)) {\n    // Ensure an empty cursor state\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0; // Check if topology is destroyed\n\n    if (self.topology.isDestroyed()) return callback(new MongoNetworkError('connection destroyed, not possible to instantiate cursor')); // Check if connection is dead and return if not possible to\n    // execute a getMore on this connection\n\n    if (isConnectionDead(self, callback)) return; // Execute the next get more\n\n    self._getMore(function (err, doc, connection) {\n      if (err) {\n        return handleCallback(callback, err);\n      } // Save the returned connection to ensure all getMore's fire over the same connection\n\n\n      self.connection = connection; // Tailable cursor getMore result, notify owner about it\n      // No attempt is made here to retry, this is left to the user of the\n      // core module to handle to keep core simple\n\n      if (self.cursorState.documents.length === 0 && self.cmd.tailable && Long.ZERO.equals(self.cursorState.cursorId)) {\n        // No more documents in the tailed cursor\n        return handleCallback(callback, new MongoError({\n          message: 'No more documents in tailed cursor',\n          tailable: self.cmd.tailable,\n          awaitData: self.cmd.awaitData\n        }));\n      } else if (self.cursorState.documents.length === 0 && self.cmd.tailable && !Long.ZERO.equals(self.cursorState.cursorId)) {\n        return nextFunction(self, callback);\n      }\n\n      if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n        return setCursorDeadAndNotified(self, callback);\n      }\n\n      nextFunction(self, callback);\n    });\n  } else if (self.cursorState.documents.length === self.cursorState.cursorIndex && self.cmd.tailable && Long.ZERO.equals(self.cursorState.cursorId)) {\n    return handleCallback(callback, new MongoError({\n      message: 'No more documents in tailed cursor',\n      tailable: self.cmd.tailable,\n      awaitData: self.cmd.awaitData\n    }));\n  } else if (self.cursorState.documents.length === self.cursorState.cursorIndex && Long.ZERO.equals(self.cursorState.cursorId)) {\n    setCursorDeadAndNotified(self, callback);\n  } else {\n    if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n      // Ensure we kill the cursor on the server\n      self.kill(() => // Set cursor in dead and notified state\n      setCursorDeadAndNotified(self, callback));\n      return;\n    } // Increment the current cursor limit\n\n\n    self.cursorState.currentLimit += 1; // Get the document\n\n    let doc = self.cursorState.documents[self.cursorState.cursorIndex++]; // Doc overflow\n\n    if (!doc || doc.$err) {\n      // Ensure we kill the cursor on the server\n      self.kill(() => // Set cursor in dead and notified state\n      setCursorDeadAndNotified(self, function () {\n        handleCallback(callback, new MongoError(doc ? doc.$err : undefined));\n      }));\n      return;\n    } // Transform the doc with passed in transformation method if provided\n\n\n    if (self.cursorState.transforms && typeof self.cursorState.transforms.doc === 'function') {\n      doc = self.cursorState.transforms.doc(doc);\n    } // Return the document\n\n\n    handleCallback(callback, null, doc);\n  }\n}\n\nmodule.exports = {\n  CursorState,\n  CoreCursor\n};","map":{"version":3,"sources":["C:/Users/david/Documents/United Plastics/Maintenance/machines/node_modules/mongodb/lib/core/cursor.js"],"names":["Logger","require","retrieveBSON","MongoError","MongoNetworkError","collationNotSupported","ReadPreference","isUnifiedTopology","executeOperation","Readable","SUPPORTS","MongoDBNamespace","mergeOptions","OperationBase","BSON","Long","CursorState","INIT","OPEN","CLOSED","GET_MORE","handleCallback","callback","err","result","process","nextTick","CoreCursor","constructor","topology","ns","cmd","options","objectMode","operation","toString","pool","server","disconnectHandler","bson","s","namespace","fromString","cursorState","cursorId","documents","cursorIndex","dead","killed","init","notified","limit","skip","batchSize","currentLimit","transforms","raw","session","topologyOptions","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","reconnect","logger","fromNumber","lastCursorId","setCursorBatchSize","value","cursorBatchSize","setCursorLimit","cursorLimit","setCursorSkip","cursorSkip","_next","nextFunction","clone","clonedOptions","cursor","isDead","isKilled","isNotified","bufferedCount","length","readBufferedDocuments","number","unreadDocumentsLength","elements","slice","doc","i","kill","isZero","killCursors","rewind","_read","state","push","listeners","emit","close","streamOptions","transform","once","_endSession","force","owner","undefined","clearSession","endSession","_getMore","isDebug","debug","JSON","stringify","query","getMore","conn","_initializeCursor","shouldCheckForSessionSupport","selectServer","primaryPreferred","done","tailable","awaitData","setCursorNotified","queryCallback","r","message","Array","isArray","document","queryFailure","find","virtual","$err","errmsg","id","operationTime","firstBatch","serverSelectOptions","readPreference","addObjectAndMethod","name","commandOptions","Object","assign","command","ASYNC_ITERATOR","prototype","Symbol","asyncIterator","isConnectionDead","self","isDestroyed","host","port","_setCursorNotifiedImpl","isCursorDeadButNotkilled","isCursorDeadAndKilled","isCursorKilled","setCursorDeadAndNotified","Error","isConnected","_type","ZERO","equals","connection","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Logger = require('./connection/logger');\nconst retrieveBSON = require('./connection/utils').retrieveBSON;\nconst MongoError = require('./error').MongoError;\nconst MongoNetworkError = require('./error').MongoNetworkError;\nconst collationNotSupported = require('./utils').collationNotSupported;\nconst ReadPreference = require('./topologies/read_preference');\nconst isUnifiedTopology = require('./utils').isUnifiedTopology;\nconst executeOperation = require('../operations/execute_operation');\nconst Readable = require('stream').Readable;\nconst SUPPORTS = require('../utils').SUPPORTS;\nconst MongoDBNamespace = require('../utils').MongoDBNamespace;\nconst mergeOptions = require('../utils').mergeOptions;\nconst OperationBase = require('../operations/operation').OperationBase;\n\nconst BSON = retrieveBSON();\nconst Long = BSON.Long;\n\n// Possible states for a cursor\nconst CursorState = {\n  INIT: 0,\n  OPEN: 1,\n  CLOSED: 2,\n  GET_MORE: 3\n};\n\n//\n// Handle callback (including any exceptions thrown)\nfunction handleCallback(callback, err, result) {\n  try {\n    callback(err, result);\n  } catch (err) {\n    process.nextTick(function() {\n      throw err;\n    });\n  }\n}\n\n/**\n * This is a cursor results callback\n *\n * @callback resultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {object} document\n */\n\n/**\n * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query.\n *\n * **CURSORS Cannot directly be instantiated**\n */\n\n/**\n * The core cursor class. All cursors in the driver build off of this one.\n *\n * @property {number} cursorBatchSize The current cursorBatchSize for the cursor\n * @property {number} cursorLimit The current cursorLimit for the cursor\n * @property {number} cursorSkip The current cursorSkip for the cursor\n */\nclass CoreCursor extends Readable {\n  /**\n   * Create a new core `Cursor` instance.\n   * **NOTE** Not to be instantiated directly\n   *\n   * @param {object} topology The server topology instance.\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {{object}|Long} cmd The selector (can be a command or a cursorId)\n   * @param {object} [options=null] Optional settings.\n   * @param {object} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/| find command documentation} and {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {object} [options.transforms=null] Transform methods for the cursor results\n   * @param {function} [options.transforms.query] Transform the value returned from the initial query\n   * @param {function} [options.transforms.doc] Transform each document returned from Cursor.prototype._next\n   */\n  constructor(topology, ns, cmd, options) {\n    super({ objectMode: true });\n    options = options || {};\n\n    if (ns instanceof OperationBase) {\n      this.operation = ns;\n      ns = this.operation.ns.toString();\n      options = this.operation.options;\n      cmd = this.operation.cmd ? this.operation.cmd : {};\n    }\n\n    // Cursor pool\n    this.pool = null;\n    // Cursor server\n    this.server = null;\n\n    // Do we have a not connected handler\n    this.disconnectHandler = options.disconnectHandler;\n\n    // Set local values\n    this.bson = topology.s.bson;\n    this.ns = ns;\n    this.namespace = MongoDBNamespace.fromString(ns);\n    this.cmd = cmd;\n    this.options = options;\n    this.topology = topology;\n\n    // All internal state\n    this.cursorState = {\n      cursorId: null,\n      cmd,\n      documents: options.documents || [],\n      cursorIndex: 0,\n      dead: false,\n      killed: false,\n      init: false,\n      notified: false,\n      limit: options.limit || cmd.limit || 0,\n      skip: options.skip || cmd.skip || 0,\n      batchSize: options.batchSize || cmd.batchSize || 1000,\n      currentLimit: 0,\n      // Result field name if not a cursor (contains the array of results)\n      transforms: options.transforms,\n      raw: options.raw || (cmd && cmd.raw)\n    };\n\n    if (typeof options.session === 'object') {\n      this.cursorState.session = options.session;\n    }\n\n    // Add promoteLong to cursor state\n    const topologyOptions = topology.s.options;\n    if (typeof topologyOptions.promoteLongs === 'boolean') {\n      this.cursorState.promoteLongs = topologyOptions.promoteLongs;\n    } else if (typeof options.promoteLongs === 'boolean') {\n      this.cursorState.promoteLongs = options.promoteLongs;\n    }\n\n    // Add promoteValues to cursor state\n    if (typeof topologyOptions.promoteValues === 'boolean') {\n      this.cursorState.promoteValues = topologyOptions.promoteValues;\n    } else if (typeof options.promoteValues === 'boolean') {\n      this.cursorState.promoteValues = options.promoteValues;\n    }\n\n    // Add promoteBuffers to cursor state\n    if (typeof topologyOptions.promoteBuffers === 'boolean') {\n      this.cursorState.promoteBuffers = topologyOptions.promoteBuffers;\n    } else if (typeof options.promoteBuffers === 'boolean') {\n      this.cursorState.promoteBuffers = options.promoteBuffers;\n    }\n\n    // Add bsonRegExp to cursor state\n    if (typeof topologyOptions.bsonRegExp === 'boolean') {\n      this.cursorState.bsonRegExp = topologyOptions.bsonRegExp;\n    } else if (typeof options.bsonRegExp === 'boolean') {\n      this.cursorState.bsonRegExp = options.bsonRegExp;\n    }\n\n    if (topologyOptions.reconnect) {\n      this.cursorState.reconnect = topologyOptions.reconnect;\n    }\n\n    // Logger\n    this.logger = Logger('Cursor', topologyOptions);\n\n    //\n    // Did we pass in a cursor id\n    if (typeof cmd === 'number') {\n      this.cursorState.cursorId = Long.fromNumber(cmd);\n      this.cursorState.lastCursorId = this.cursorState.cursorId;\n    } else if (cmd instanceof Long) {\n      this.cursorState.cursorId = cmd;\n      this.cursorState.lastCursorId = cmd;\n    }\n\n    // TODO: remove as part of NODE-2104\n    if (this.operation) {\n      this.operation.cursorState = this.cursorState;\n    }\n  }\n\n  setCursorBatchSize(value) {\n    this.cursorState.batchSize = value;\n  }\n\n  cursorBatchSize() {\n    return this.cursorState.batchSize;\n  }\n\n  setCursorLimit(value) {\n    this.cursorState.limit = value;\n  }\n\n  cursorLimit() {\n    return this.cursorState.limit;\n  }\n\n  setCursorSkip(value) {\n    this.cursorState.skip = value;\n  }\n\n  cursorSkip() {\n    return this.cursorState.skip;\n  }\n\n  /**\n   * Retrieve the next document from the cursor\n   * @method\n   * @param {resultCallback} callback A callback function\n   */\n  _next(callback) {\n    nextFunction(this, callback);\n  }\n\n  /**\n   * Clone the cursor\n   * @method\n   * @return {Cursor}\n   */\n  clone() {\n    const clonedOptions = mergeOptions({}, this.options);\n    delete clonedOptions.session;\n    return this.topology.cursor(this.ns, this.cmd, clonedOptions);\n  }\n\n  /**\n   * Checks if the cursor is dead\n   * @method\n   * @return {boolean} A boolean signifying if the cursor is dead or not\n   */\n  isDead() {\n    return this.cursorState.dead === true;\n  }\n\n  /**\n   * Checks if the cursor was killed by the application\n   * @method\n   * @return {boolean} A boolean signifying if the cursor was killed by the application\n   */\n  isKilled() {\n    return this.cursorState.killed === true;\n  }\n\n  /**\n   * Checks if the cursor notified it's caller about it's death\n   * @method\n   * @return {boolean} A boolean signifying if the cursor notified the callback\n   */\n  isNotified() {\n    return this.cursorState.notified === true;\n  }\n\n  /**\n   * Returns current buffered documents length\n   * @method\n   * @return {number} The number of items in the buffered documents\n   */\n  bufferedCount() {\n    return this.cursorState.documents.length - this.cursorState.cursorIndex;\n  }\n\n  /**\n   * Returns current buffered documents\n   * @method\n   * @return {Array} An array of buffered documents\n   */\n  readBufferedDocuments(number) {\n    const unreadDocumentsLength = this.cursorState.documents.length - this.cursorState.cursorIndex;\n    const length = number < unreadDocumentsLength ? number : unreadDocumentsLength;\n    let elements = this.cursorState.documents.slice(\n      this.cursorState.cursorIndex,\n      this.cursorState.cursorIndex + length\n    );\n\n    // Transform the doc with passed in transformation method if provided\n    if (this.cursorState.transforms && typeof this.cursorState.transforms.doc === 'function') {\n      // Transform all the elements\n      for (let i = 0; i < elements.length; i++) {\n        elements[i] = this.cursorState.transforms.doc(elements[i]);\n      }\n    }\n\n    // Ensure we do not return any more documents than the limit imposed\n    // Just return the number of elements up to the limit\n    if (\n      this.cursorState.limit > 0 &&\n      this.cursorState.currentLimit + elements.length > this.cursorState.limit\n    ) {\n      elements = elements.slice(0, this.cursorState.limit - this.cursorState.currentLimit);\n      this.kill();\n    }\n\n    // Adjust current limit\n    this.cursorState.currentLimit = this.cursorState.currentLimit + elements.length;\n    this.cursorState.cursorIndex = this.cursorState.cursorIndex + elements.length;\n\n    // Return elements\n    return elements;\n  }\n\n  /**\n   * Resets local state for this cursor instance, and issues a `killCursors` command to the server\n   *\n   * @param {resultCallback} callback A callback function\n   */\n  kill(callback) {\n    // Set cursor to dead\n    this.cursorState.dead = true;\n    this.cursorState.killed = true;\n    // Remove documents\n    this.cursorState.documents = [];\n\n    // If no cursor id just return\n    if (\n      this.cursorState.cursorId == null ||\n      this.cursorState.cursorId.isZero() ||\n      this.cursorState.init === false\n    ) {\n      if (callback) callback(null, null);\n      return;\n    }\n\n    this.server.killCursors(this.ns, this.cursorState, callback);\n  }\n\n  /**\n   * Resets the cursor\n   */\n  rewind() {\n    if (this.cursorState.init) {\n      if (!this.cursorState.dead) {\n        this.kill();\n      }\n\n      this.cursorState.currentLimit = 0;\n      this.cursorState.init = false;\n      this.cursorState.dead = false;\n      this.cursorState.killed = false;\n      this.cursorState.notified = false;\n      this.cursorState.documents = [];\n      this.cursorState.cursorId = null;\n      this.cursorState.cursorIndex = 0;\n    }\n  }\n\n  // Internal methods\n  _read() {\n    if ((this.s && this.s.state === CursorState.CLOSED) || this.isDead()) {\n      return this.push(null);\n    }\n\n    // Get the next item\n    this._next((err, result) => {\n      if (err) {\n        if (this.listeners('error') && this.listeners('error').length > 0) {\n          this.emit('error', err);\n        }\n        if (!this.isDead()) this.close();\n\n        // Emit end event\n        this.emit('end');\n        return this.emit('finish');\n      }\n\n      // If we provided a transformation method\n      if (\n        this.cursorState.streamOptions &&\n        typeof this.cursorState.streamOptions.transform === 'function' &&\n        result != null\n      ) {\n        return this.push(this.cursorState.streamOptions.transform(result));\n      }\n\n      // Return the result\n      this.push(result);\n\n      if (result === null && this.isDead()) {\n        this.once('end', () => {\n          this.close();\n          this.emit('finish');\n        });\n      }\n    });\n  }\n\n  _endSession(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n\n    const session = this.cursorState.session;\n\n    if (session && (options.force || session.owner === this)) {\n      this.cursorState.session = undefined;\n\n      if (this.operation) {\n        this.operation.clearSession();\n      }\n\n      session.endSession(callback);\n      return true;\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    return false;\n  }\n\n  _getMore(callback) {\n    if (this.logger.isDebug()) {\n      this.logger.debug(`schedule getMore call for query [${JSON.stringify(this.query)}]`);\n    }\n\n    // Set the current batchSize\n    let batchSize = this.cursorState.batchSize;\n    if (\n      this.cursorState.limit > 0 &&\n      this.cursorState.currentLimit + batchSize > this.cursorState.limit\n    ) {\n      batchSize = this.cursorState.limit - this.cursorState.currentLimit;\n    }\n\n    const cursorState = this.cursorState;\n    this.server.getMore(this.ns, cursorState, batchSize, this.options, (err, result, conn) => {\n      // NOTE: `getMore` modifies `cursorState`, would be very ideal not to do so in the future\n      if (err || (cursorState.cursorId && cursorState.cursorId.isZero())) {\n        this._endSession();\n      }\n\n      callback(err, result, conn);\n    });\n  }\n\n  _initializeCursor(callback) {\n    const cursor = this;\n\n    // NOTE: this goes away once cursors use `executeOperation`\n    if (isUnifiedTopology(cursor.topology) && cursor.topology.shouldCheckForSessionSupport()) {\n      cursor.topology.selectServer(ReadPreference.primaryPreferred, err => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        this._initializeCursor(callback);\n      });\n\n      return;\n    }\n\n    function done(err, result) {\n      const cursorState = cursor.cursorState;\n      if (err || (cursorState.cursorId && cursorState.cursorId.isZero())) {\n        cursor._endSession();\n      }\n\n      if (\n        cursorState.documents.length === 0 &&\n        cursorState.cursorId &&\n        cursorState.cursorId.isZero() &&\n        !cursor.cmd.tailable &&\n        !cursor.cmd.awaitData\n      ) {\n        return setCursorNotified(cursor, callback);\n      }\n\n      callback(err, result);\n    }\n\n    const queryCallback = (err, r) => {\n      if (err) {\n        return done(err);\n      }\n\n      const result = r.message;\n\n      if (Array.isArray(result.documents) && result.documents.length === 1) {\n        const document = result.documents[0];\n\n        if (result.queryFailure) {\n          return done(new MongoError(document), null);\n        }\n\n        // Check if we have a command cursor\n        if (!cursor.cmd.find || (cursor.cmd.find && cursor.cmd.virtual === false)) {\n          // We have an error document, return the error\n          if (document.$err || document.errmsg) {\n            return done(new MongoError(document), null);\n          }\n\n          // We have a cursor document\n          if (document.cursor != null && typeof document.cursor !== 'string') {\n            const id = document.cursor.id;\n            // If we have a namespace change set the new namespace for getmores\n            if (document.cursor.ns) {\n              cursor.ns = document.cursor.ns;\n            }\n            // Promote id to long if needed\n            cursor.cursorState.cursorId = typeof id === 'number' ? Long.fromNumber(id) : id;\n            cursor.cursorState.lastCursorId = cursor.cursorState.cursorId;\n            cursor.cursorState.operationTime = document.operationTime;\n\n            // If we have a firstBatch set it\n            if (Array.isArray(document.cursor.firstBatch)) {\n              cursor.cursorState.documents = document.cursor.firstBatch; //.reverse();\n            }\n\n            // Return after processing command cursor\n            return done(null, result);\n          }\n        }\n      }\n\n      // Otherwise fall back to regular find path\n      const cursorId = result.cursorId || 0;\n      cursor.cursorState.cursorId = cursorId instanceof Long ? cursorId : Long.fromNumber(cursorId);\n      cursor.cursorState.documents = result.documents;\n      cursor.cursorState.lastCursorId = result.cursorId;\n\n      // Transform the results with passed in transformation method if provided\n      if (\n        cursor.cursorState.transforms &&\n        typeof cursor.cursorState.transforms.query === 'function'\n      ) {\n        cursor.cursorState.documents = cursor.cursorState.transforms.query(result);\n      }\n\n      done(null, result);\n    };\n\n    if (cursor.operation) {\n      if (cursor.logger.isDebug()) {\n        cursor.logger.debug(\n          `issue initial query [${JSON.stringify(cursor.cmd)}] with flags [${JSON.stringify(\n            cursor.query\n          )}]`\n        );\n      }\n\n      executeOperation(cursor.topology, cursor.operation, (err, result) => {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        cursor.server = cursor.operation.server;\n        cursor.cursorState.init = true;\n\n        // NOTE: this is a special internal method for cloning a cursor, consider removing\n        if (cursor.cursorState.cursorId != null) {\n          return done();\n        }\n\n        queryCallback(err, result);\n      });\n\n      return;\n    }\n\n    // Very explicitly choose what is passed to selectServer\n    const serverSelectOptions = {};\n    if (cursor.cursorState.session) {\n      serverSelectOptions.session = cursor.cursorState.session;\n    }\n\n    if (cursor.operation) {\n      serverSelectOptions.readPreference = cursor.operation.readPreference;\n    } else if (cursor.options.readPreference) {\n      serverSelectOptions.readPreference = cursor.options.readPreference;\n    }\n\n    return cursor.topology.selectServer(serverSelectOptions, (err, server) => {\n      if (err) {\n        const disconnectHandler = cursor.disconnectHandler;\n        if (disconnectHandler != null) {\n          return disconnectHandler.addObjectAndMethod(\n            'cursor',\n            cursor,\n            'next',\n            [callback],\n            callback\n          );\n        }\n\n        return callback(err);\n      }\n\n      cursor.server = server;\n      cursor.cursorState.init = true;\n      if (collationNotSupported(cursor.server, cursor.cmd)) {\n        return callback(new MongoError(`server ${cursor.server.name} does not support collation`));\n      }\n\n      // NOTE: this is a special internal method for cloning a cursor, consider removing\n      if (cursor.cursorState.cursorId != null) {\n        return done();\n      }\n\n      if (cursor.logger.isDebug()) {\n        cursor.logger.debug(\n          `issue initial query [${JSON.stringify(cursor.cmd)}] with flags [${JSON.stringify(\n            cursor.query\n          )}]`\n        );\n      }\n\n      if (cursor.cmd.find != null) {\n        server.query(cursor.ns, cursor.cmd, cursor.cursorState, cursor.options, queryCallback);\n        return;\n      }\n\n      const commandOptions = Object.assign({ session: cursor.cursorState.session }, cursor.options);\n      server.command(cursor.ns, cursor.cmd, commandOptions, queryCallback);\n    });\n  }\n}\n\nif (SUPPORTS.ASYNC_ITERATOR) {\n  CoreCursor.prototype[Symbol.asyncIterator] = require('../async/async_iterator').asyncIterator;\n}\n\n/**\n * Validate if the pool is dead and return error\n */\nfunction isConnectionDead(self, callback) {\n  if (self.pool && self.pool.isDestroyed()) {\n    self.cursorState.killed = true;\n    const err = new MongoNetworkError(\n      `connection to host ${self.pool.host}:${self.pool.port} was destroyed`\n    );\n\n    _setCursorNotifiedImpl(self, () => callback(err));\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor is dead but was not explicitly killed by user\n */\nfunction isCursorDeadButNotkilled(self, callback) {\n  // Cursor is dead but not marked killed, return null\n  if (self.cursorState.dead && !self.cursorState.killed) {\n    self.cursorState.killed = true;\n    setCursorNotified(self, callback);\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor is dead and was killed by user\n */\nfunction isCursorDeadAndKilled(self, callback) {\n  if (self.cursorState.dead && self.cursorState.killed) {\n    handleCallback(callback, new MongoError('cursor is dead'));\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor was killed by the user\n */\nfunction isCursorKilled(self, callback) {\n  if (self.cursorState.killed) {\n    setCursorNotified(self, callback);\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Mark cursor as being dead and notified\n */\nfunction setCursorDeadAndNotified(self, callback) {\n  self.cursorState.dead = true;\n  setCursorNotified(self, callback);\n}\n\n/**\n * Mark cursor as being notified\n */\nfunction setCursorNotified(self, callback) {\n  _setCursorNotifiedImpl(self, () => handleCallback(callback, null, null));\n}\n\nfunction _setCursorNotifiedImpl(self, callback) {\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n\n  if (self.cursorState.session) {\n    self._endSession(callback);\n    return;\n  }\n\n  return callback();\n}\n\nfunction nextFunction(self, callback) {\n  // We have notified about it\n  if (self.cursorState.notified) {\n    return callback(new Error('cursor is exhausted'));\n  }\n\n  // Cursor is killed return null\n  if (isCursorKilled(self, callback)) return;\n\n  // Cursor is dead but not marked killed, return null\n  if (isCursorDeadButNotkilled(self, callback)) return;\n\n  // We have a dead and killed cursor, attempting to call next should error\n  if (isCursorDeadAndKilled(self, callback)) return;\n\n  // We have just started the cursor\n  if (!self.cursorState.init) {\n    // Topology is not connected, save the call in the provided store to be\n    // Executed at some point when the handler deems it's reconnected\n    if (!self.topology.isConnected(self.options)) {\n      // Only need this for single server, because repl sets and mongos\n      // will always continue trying to reconnect\n      if (self.topology._type === 'server' && !self.topology.s.options.reconnect) {\n        // Reconnect is disabled, so we'll never reconnect\n        return callback(new MongoError('no connection available'));\n      }\n\n      if (self.disconnectHandler != null) {\n        if (self.topology.isDestroyed()) {\n          // Topology was destroyed, so don't try to wait for it to reconnect\n          return callback(new MongoError('Topology was destroyed'));\n        }\n\n        self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);\n        return;\n      }\n    }\n\n    self._initializeCursor((err, result) => {\n      if (err || result === null) {\n        callback(err, result);\n        return;\n      }\n\n      nextFunction(self, callback);\n    });\n\n    return;\n  }\n\n  if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n    // Ensure we kill the cursor on the server\n    self.kill(() =>\n      // Set cursor in dead and notified state\n      setCursorDeadAndNotified(self, callback)\n    );\n  } else if (\n    self.cursorState.cursorIndex === self.cursorState.documents.length &&\n    !Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    // Ensure an empty cursor state\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n\n    // Check if topology is destroyed\n    if (self.topology.isDestroyed())\n      return callback(\n        new MongoNetworkError('connection destroyed, not possible to instantiate cursor')\n      );\n\n    // Check if connection is dead and return if not possible to\n    // execute a getMore on this connection\n    if (isConnectionDead(self, callback)) return;\n\n    // Execute the next get more\n    self._getMore(function(err, doc, connection) {\n      if (err) {\n        return handleCallback(callback, err);\n      }\n\n      // Save the returned connection to ensure all getMore's fire over the same connection\n      self.connection = connection;\n\n      // Tailable cursor getMore result, notify owner about it\n      // No attempt is made here to retry, this is left to the user of the\n      // core module to handle to keep core simple\n      if (\n        self.cursorState.documents.length === 0 &&\n        self.cmd.tailable &&\n        Long.ZERO.equals(self.cursorState.cursorId)\n      ) {\n        // No more documents in the tailed cursor\n        return handleCallback(\n          callback,\n          new MongoError({\n            message: 'No more documents in tailed cursor',\n            tailable: self.cmd.tailable,\n            awaitData: self.cmd.awaitData\n          })\n        );\n      } else if (\n        self.cursorState.documents.length === 0 &&\n        self.cmd.tailable &&\n        !Long.ZERO.equals(self.cursorState.cursorId)\n      ) {\n        return nextFunction(self, callback);\n      }\n\n      if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n        return setCursorDeadAndNotified(self, callback);\n      }\n\n      nextFunction(self, callback);\n    });\n  } else if (\n    self.cursorState.documents.length === self.cursorState.cursorIndex &&\n    self.cmd.tailable &&\n    Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    return handleCallback(\n      callback,\n      new MongoError({\n        message: 'No more documents in tailed cursor',\n        tailable: self.cmd.tailable,\n        awaitData: self.cmd.awaitData\n      })\n    );\n  } else if (\n    self.cursorState.documents.length === self.cursorState.cursorIndex &&\n    Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    setCursorDeadAndNotified(self, callback);\n  } else {\n    if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n      // Ensure we kill the cursor on the server\n      self.kill(() =>\n        // Set cursor in dead and notified state\n        setCursorDeadAndNotified(self, callback)\n      );\n\n      return;\n    }\n\n    // Increment the current cursor limit\n    self.cursorState.currentLimit += 1;\n\n    // Get the document\n    let doc = self.cursorState.documents[self.cursorState.cursorIndex++];\n\n    // Doc overflow\n    if (!doc || doc.$err) {\n      // Ensure we kill the cursor on the server\n      self.kill(() =>\n        // Set cursor in dead and notified state\n        setCursorDeadAndNotified(self, function() {\n          handleCallback(callback, new MongoError(doc ? doc.$err : undefined));\n        })\n      );\n\n      return;\n    }\n\n    // Transform the doc with passed in transformation method if provided\n    if (self.cursorState.transforms && typeof self.cursorState.transforms.doc === 'function') {\n      doc = self.cursorState.transforms.doc(doc);\n    }\n\n    // Return the document\n    handleCallback(callback, null, doc);\n  }\n}\n\nmodule.exports = {\n  CursorState,\n  CoreCursor\n};\n"]},"metadata":{},"sourceType":"script"}